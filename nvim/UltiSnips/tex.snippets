global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def beamer(): 
	return vim.eval('vimtex#syntax#in_beamer()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal


snippet textemp "Latex Template" bA
\documentclass[a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage[ngerman]{babel}

\title{$1}
\author{Kimi LÃ¶ffel}

\begin{document}

$0

\end{document}
endsnippet

snippet beg "\begin{} / \end{}" bA
\begin{$1}
$0
\end{$1}
endsnippet

snippet -> "rightarrow" iA
$\rightarrow$
endsnippet


priority 100
snippet ... "ldots" iA
\ldots
endsnippet


snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet


snippet enum "Enumerate" bA
\begin{enumerate}
	\item{$0}
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item{$0}
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1]{$0}
\end{description}
endsnippet

snippet it "Add item" b
\item{$1}$0
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

# Math stuff

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet != "not equals" iA
\neq 
endsnippet
